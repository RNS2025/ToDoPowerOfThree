@using PowerOfThree.Models
@using PowerOfThree.Services
@inject TaskManager TaskManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="today-tasks-card">
    <h2>üéØ TODAY'S POWER OF THREE</h2>

    @if (todaySelection == null)
    {
        <div class="no-selection">
            <div class="selection-hero">
                <div class="hero-icon">‚ö°</div>
                <h3>Ready to Conquer Today?</h3>
                <p>Choose your generation mode and let's select your 3 power tasks!</p>
            </div>

            <div class="generation-modes">
                <button class="mode-button" @onclick="() => GenerateTasks(TaskGenerationMode.Balanced)">
                    ‚öñÔ∏è Balanced<br><small>1 High, 1 Medium, 1 Low</small>
                </button>
                <button class="mode-button" @onclick="() => GenerateTasks(TaskGenerationMode.ByPriority)">
                    üî• Priority First<br><small>Most Important Tasks</small>
                </button>
                <button class="mode-button" @onclick="() => GenerateTasks(TaskGenerationMode.ByDeadline)">
                    ‚è∞ Deadline Focus<br><small>Most Urgent Tasks</small>
                </button>
                <button class="mode-button" @onclick="() => GenerateTasks(TaskGenerationMode.Random)">
                    üé≤ Random<br><small>Surprise Me!</small>
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="selection-header">
            <div class="selection-info">
                <span class="mode-badge">@GetModeDisplay(todaySelection.GenerationMode)</span>
                <span class="progress-badge">@todaySelection.CompletedCount/3 Complete</span>
            </div>
            <div class="selection-actions">
                <button class="regenerate-btn" @onclick="RegenerateTasks">üîÑ Regenerate</button>
                <button class="clear-btn" @onclick="ClearSelection">‚ùå Clear</button>
            </div>
        </div>

        @if (todaySelection.IsAllCompleted)
        {
            <div class="completion-celebration">
                <div class="celebration-content">
                    <div class="celebration-icon">üéâ</div>
                    <h3>AMAZING! YOU DID IT!</h3>
                    <p>You've completed all 3 tasks today! You're unstoppable! üöÄ</p>
                    <div class="celebration-stats">
                        <div class="stat">
                            <div class="stat-number">3</div>
                            <div class="stat-label">Tasks Crushed</div>
                        </div>
                        <div class="stat">
                            <div class="stat-number">100%</div>
                            <div class="stat-label">Success Rate</div>
                        </div>
                        <div class="stat">
                            <div class="stat-number">üí™</div>
                            <div class="stat-label">Power Level</div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="today-tasks-list">
            @foreach (var task in todaySelection.SelectedTasks)
            {
                <div class="today-task-item @(task.IsCompleted ? "completed" : "")">
                    <div class="task-checkbox" @onclick="() => ToggleTaskCompletion(task)">
                        <input type="checkbox" checked="@task.IsCompleted" />
                        <span class="checkmark"></span>
                    </div>

                    <div class="task-content">
                        <div class="task-header">
                            <div class="task-title">@task.Title</div>
                            <div class="task-priority priority-@task.Priority.ToLower()">@task.Priority</div>
                        </div>

                        @if (!string.IsNullOrEmpty(task.Description))
                        {
                            <div class="task-description">@task.Description</div>
                        }

                        <div class="task-meta">
                            <span class="deadline">üìÖ @task.Deadline.ToShortDateString()</span>
                            <span class="estimation">‚è±Ô∏è @task.EstimatedMinutes min</span>
                        </div>

                        @if (task.SubTasks.Any())
                        {
                            <div class="task-subtasks">
                                @foreach (var subtask in task.SubTasks)
                                {
                                    <div class="subtask">‚öôÔ∏è @subtask</div>
                                }
                            </div>
                        }
                    </div>

                    @if (task.IsCompleted)
                    {
                        <div class="completion-badge">
                            ‚úÖ DONE!
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<!-- Completion Celebration Modal -->
@if (showCompletionModal)
{
    <div class="modal-overlay" @onclick="CloseCompletionModal" id="todayTasksCompletionModal">
        <div class="completion-modal" @onclick:stopPropagation="true">
            <div class="modal-content">
                <span class="celebration-icon">üéâ</span>
                <h2>Mission Accomplished!</h2>
                <p>You've successfully completed: <strong>@completedTaskTitle</strong></p>
                <p class="celebration-message">@GetRandomCelebrationMessage()</p>
                <div class="modal-actions">
                    <button class="celebrate-btn" @onclick="CloseCompletionModal">Sweet!</button>
                </div>
            </div>
        </div>
    </div>
}

@if (todaySelection == null && !initialNotificationPromptDone)
{
    <div class="notification-prompt">
        <p>Enable notifications to get reminders for your Power of Three tasks!</p>
        <button class="mode-button" @onclick="RequestNotifications">üîî Enable Reminders</button>
    </div>
}

@if (canShowTestNotificationButton)
{
    <div class="test-notification-section" style="margin-top: 15px; text-align: center;">
        <button class="mode-button" @onclick="ShowTestNotificationAsync">üß™ Test Notification</button>
    </div>
}

@code {
    private DailyTaskSelection? todaySelection;
    private bool showCompletionModal = false;
    private string completedTaskTitle = "";
    private bool initialNotificationPromptDone = false;
    private bool canShowTestNotificationButton = false;

    protected override async Task OnInitializedAsync()
    {
        await TaskManager.InitializeAsync();
        todaySelection = TaskManager.GetTodaySelection();
        await UpdateTodayTasksInDbForPwa(); // Initial DB sync

        TaskManager.TodaySelectionChanged += OnTodaySelectionChanged;
        TaskManager.TasksChanged += OnTasksChanged;

        // Check current permission state to see if we need to prompt
        var permissionState = await JSRuntime.InvokeAsync<string>("pwaGetNotificationPermissionState");
        if (permissionState == "granted" || permissionState == "denied")
        {
            initialNotificationPromptDone = true;
        }
        if (permissionState == "granted")
        {
            canShowTestNotificationButton = true;
        }
    }

    private async Task RequestNotifications()
    {
        var permissionResult = await JSRuntime.InvokeAsync<string>("pwaRequestNotificationPermission");
        initialNotificationPromptDone = true; // User has interacted with the prompt
        if (permissionResult == "granted")
        {
            canShowTestNotificationButton = true;
        }
        else
        {
            canShowTestNotificationButton = false;
        }
        StateHasChanged();
    }

    private async Task ShowTestNotificationAsync()
    {
        await JSRuntime.InvokeVoidAsync("pwaShowTestNotification");
    }

    private async Task UpdateTodayTasksInDbForPwa()
    {
        if (todaySelection != null && todaySelection.SelectedTasks != null)
        {
            // Pass only necessary data for PWA
            var tasksForDb = todaySelection.SelectedTasks.Select(t => new { t.Title, t.IsCompleted }).ToList();
            await JSRuntime.InvokeVoidAsync("pwaUpdateTodayTasksInDB", tasksForDb);
        }
        else
        {
            // Send empty list to clear or indicate no tasks
            await JSRuntime.InvokeVoidAsync("pwaUpdateTodayTasksInDB", new List<object>());
        }
    }

    private async Task GenerateTasks(TaskGenerationMode mode)
    {
        todaySelection = await TaskManager.GenerateTodayTasksAsync(mode);
        await UpdateTodayTasksInDbForPwa();
        StateHasChanged();
    }

    private async Task RegenerateTasks()
    {
        if (todaySelection != null)
        {
            await GenerateTasks(todaySelection.GenerationMode);
            // UpdateTodayTasksInDbForPwa is called within GenerateTasks
        }
    }

    private async Task ClearSelection()
    {
        await TaskManager.ClearTodaySelectionAsync();
        todaySelection = null; // TaskManager event will also set this
                               // OnTodaySelectionChanged will handle DB update
        StateHasChanged();
    }

    private async Task ToggleTaskCompletion(TodoTask task)
    {
        bool wasCompleted = task.IsCompleted;
        task.IsCompleted = !task.IsCompleted;
        task.CompletedAt = task.IsCompleted ? DateTime.Now : (DateTime?)null;

        await TaskManager.UpdateTaskAsync(task);
        // OnTodaySelectionChanged (triggered by TaskManager) should handle DB update.
        // If not, uncomment below:
        // await UpdateTodayTasksInDbForPwa();

        if (!wasCompleted && task.IsCompleted)
        {
            await ShowCompletionModal(task);
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task ShowCompletionModal(TodoTask task) // Changed to async Task
    {
        completedTaskTitle = task.Title;
        showCompletionModal = true;
        StateHasChanged(); // Ensure modal is rendered before trying to scroll
        await JSRuntime.InvokeVoidAsync("scrollToElementId", "todayTasksCompletionModal"); // Added JS interop call
    }

    private void CloseCompletionModal()
    {
        showCompletionModal = false;
        StateHasChanged();
    }

    private string GetRandomCelebrationMessage()
    {
        var messages = new[]
        {
"üåü You're on fire! One step closer to your goals!",
"üí™ Outstanding progress! Keep up the momentum!",
"üöÄ Task conquered! You're becoming unstoppable!",
"‚ú® Fantastic work! Your productivity is inspiring!",
"üéØ Bulls-eye! Another mission accomplished!",
"üèÜ Champion move! You're crushing it today!",
"‚ö° Lightning fast! Your efficiency is amazing!",
"üåà Brilliant! You make productivity look easy!",
"üî• On a roll! Nothing can stop you now!",
"üíé Stellar performance! You're a true achiever!"
};

        var random = new Random();
        return messages[random.Next(messages.Length)];
    }

    private void OnTodaySelectionChanged()
    {
        todaySelection = TaskManager.GetTodaySelection();
        InvokeAsync(async () =>
        {
            await UpdateTodayTasksInDbForPwa();
            // Update canShowTestNotificationButton if permission might have changed implicitly
            var permissionState = await JSRuntime.InvokeAsync<string>("pwaGetNotificationPermissionState");
            canShowTestNotificationButton = permissionState == "granted";
            StateHasChanged();
        });
    }

    private void OnTasksChanged() // General tasks changed, re-evaluate if today's selection is affected
    {
        // This might be redundant if TodaySelectionChanged always fires when relevant.
        // However, if a task part of today's selection is deleted externally,
        // todaySelection might need to be re-evaluated and DB updated.
        // For simplicity, we assume TaskManager handles this and triggers TodaySelectionChanged.
        InvokeAsync(StateHasChanged);
    }

    private string GetModeDisplay(TaskGenerationMode mode) => mode switch
    {
        TaskGenerationMode.Balanced => "‚öñÔ∏è Balanced",
        TaskGenerationMode.ByPriority => "üî• Priority",
        TaskGenerationMode.ByDeadline => "‚è∞ Deadline",
        TaskGenerationMode.Random => "üé≤ Random",
        _ => "Unknown"
    };

    public void Dispose()
    {
        TaskManager.TodaySelectionChanged -= OnTodaySelectionChanged;
        TaskManager.TasksChanged -= OnTasksChanged;
    }
}
