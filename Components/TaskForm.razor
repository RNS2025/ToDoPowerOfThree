@inject TaskManager TaskManager
@implements IDisposable

<div class="form-card">
    <h3>⚡ @(IsEditing ? "Edit Mission" : "Add New Mission")</h3>

    @if (!IsEditing)
    {
        <!-- Quick Task Templates -->
        <div class="quick-templates">
            <h4>Quick Start Templates</h4>
            <div class="template-grid">
                <button type="button" class="template-btn" @onclick="() => ApplyTemplate(TaskTemplate.Meeting)">
                    📞 Call
                </button>
                <button type="button" class="template-btn" @onclick="() => ApplyTemplate(TaskTemplate.Research)">
                    🔍 Research
                </button>
                <button type="button" class="template-btn" @onclick="() => ApplyTemplate(TaskTemplate.Development)">
                    🐛 Fix Bug
                </button>
                <button type="button" class="template-btn" @onclick="() => ApplyTemplate(TaskTemplate.Review)">
                    📄 Review
                </button>
                <button type="button" class="template-btn" @onclick="() => ApplyTemplate(TaskTemplate.Planning)">
                    📅 Planning
                </button>
                <button type="button" class="template-btn" @onclick="() => ApplyTemplate(TaskTemplate.Learning)">
                    🎓 Learning
                </button>
            </div>
        </div>

        <div class="form-divider">
            <span>Or create custom task</span>
        </div>
    }

    <EditForm Model="@task" OnValidSubmit="SaveTask">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="task-title">Title:</label>
            <InputText id="task-title" class="form-control" @bind-Value="task.Title" placeholder="e.g., Conquer the world" />
            <ValidationMessage For="@(() => task.Title)" />
        </div>

        <div class="form-group">
            <label for="task-description">Description:</label>
            <InputTextArea id="task-description" class="form-control" @bind-Value="task.Description" placeholder="Details about your mission..." @oninput="OnDescriptionInput" />
            <ValidationMessage For="@(() => task.Description)" />
            @if (!string.IsNullOrEmpty(task.Title) && !hasUserEditedDescription)
            {
                <div class="auto-description-hint">
                    <small>✨ Description will be auto-generated when you finish typing</small>
                </div>
            }
        </div>

        <div class="form-group">
            <label for="task-deadline">Deadline:</label>
            <InputDate id="task-deadline" class="form-control" @bind-Value="task.Deadline" />
            <ValidationMessage For="@(() => task.Deadline)" />
        </div>

        <div class="form-group">
            <label for="task-priority">Priority:</label>
            <InputSelect id="task-priority" class="form-control" @bind-Value="task.Priority">
                <option value="Low">🟢 Low Priority</option>
                <option value="Medium">🟡 Medium Priority</option>
                <option value="High">🔴 High Priority</option>
            </InputSelect>
            <ValidationMessage For="@(() => task.Priority)" />
        </div>

        <div class="form-group">
            <label for="task-category">Category:</label>
            <InputText id="task-category" class="form-control" @bind-Value="task.Category" placeholder="e.g., Work, Personal" />
            <ValidationMessage For="@(() => task.Category)" />
        </div>

        <div class="form-group">
            <label for="estimated-minutes">Estimated Time (minutes):</label>
            <InputNumber id="estimated-minutes" class="form-control" @bind-Value="task.EstimatedMinutes" placeholder="e.g., 30" />
            <ValidationMessage For="@(() => task.EstimatedMinutes)" />
            <div class="quick-time-estimates">
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(5)">☕ 5m</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(15)">⏱️ 15m</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(30)">⏳ 30m</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(60)">💡 1h</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(90)">✨ 1.5h</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(120)">🚀 2h</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(180)">📚 3h</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(240)">🌓 4h</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(360)">🌔 6h</button>
                <button type="button" class="time-btn" @onclick="() => SetEstimatedTime(480)">☀️ 8h</button>
            </div>
        </div>

        <div class="form-group">
            <label for="subtasks">Subtasks:</label>
            @foreach (var sub in task.SubTasks)
            {
                <div class="subtask-item d-flex justify-content-between align-items-center mb-1">
                    <span>@sub</span>
                    <button type="button" class="btn btn-sm btn-danger btn-remove-subtask" @onclick="() => RemoveSubtask(sub)">❌</button>
                </div>
            }
            <div class="add-subtask input-group mt-2">
                <InputText @bind-Value="newSubTask" class="form-control" placeholder="New subtask" />
                <button type="button" class="btn btn-outline-secondary" @onclick="AddSubtask">➕ Add</button>
            </div>
        </div>

        <div class="form-group">
            <div class="form-check">
                <InputCheckbox id="is-recurring" class="form-check-input" @bind-Value="task.IsRecurring" />
                <label class="form-check-label" for="is-recurring">
                    🔁 Make this a recurring task
                </label>
            </div>
        </div>

        @if (task.IsRecurring)
        {
            <div class="recurrence-options">
                <h4>Recurrence Settings</h4>
                <div class="form-group">
                    <label for="recurrence-unit">Repeats:</label>
                    <InputSelect id="recurrence-unit" class="form-control" @bind-Value="task.RecurrenceUnit">
                        @foreach (var unit in Enum.GetValues(typeof(RecurrenceUnitType)))
                        {
                            if ((RecurrenceUnitType)unit == RecurrenceUnitType.None && task.RecurrenceUnit != RecurrenceUnitType.None) continue;
                            <option value="@unit">@unit</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="recurrence-interval">Every:</label>
                    <div class="input-group">
                        <InputNumber id="recurrence-interval" class="form-control" @bind-Value="task.RecurrenceInterval" min="1" />
                        <span class="input-group-text">@(task.RecurrenceUnit.ToString().ToLower() + (task.RecurrenceInterval > 1 ? "s" : ""))</span>
                    </div>
                </div>
            </div>
        }

        <div class="form-actions">
            <button type="submit" class="btn btn-primary">
                @(IsEditing ? "🚀 Update Mission" : "🚀 Launch Mission")
            </button>
            @if (IsEditing)
            {
                <button type="button" @onclick="CancelEdit" class="btn btn-secondary">
                    ❌ Cancel
                </button>
            }
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public TodoTask? EditTask { get; set; }
    [Parameter] public EventCallback OnTaskSaved { get; set; }
    [Parameter] public EventCallback OnEditCancelled { get; set; }

    private TodoTask task = new();
    private string newSubTask = string.Empty;
    private bool IsEditing => EditTask != null;
    private string generatedDescription = string.Empty;
    private bool hasUserEditedDescription = false;

    // New dictionary for time estimate references (optional, for future use or display)
    private Dictionary<int, string> timeEstimateReferences = new()
    {
        { 5, "Quick check-in" },
        { 15, "Short task/email" },
        { 30, "Focused work block" },
        { 60, "Deep work session" },
        { 90, "Extended focus" },
        { 120, "Large task/meeting" },
        { 180, "Deep dive session" },
        { 240, "Half-day task" },
        { 360, "Significant work block" },
        { 480, "Full-day task" }
    };

    public enum TaskTemplate
    {
        Meeting,
        Research,
        Development,
        Review,
        Planning,
        Learning
    }

    protected override void OnParametersSet()
    {
        if (EditTask != null)
        {
            task = new TodoTask
            {
                Id = EditTask.Id,
                Title = EditTask.Title,
                Description = EditTask.Description,
                SubTasks = EditTask.SubTasks.ToList(),
                Deadline = EditTask.Deadline,
                Priority = EditTask.Priority,
                EstimatedMinutes = EditTask.EstimatedMinutes,
                Category = EditTask.Category,
                IsCompleted = EditTask.IsCompleted, // This will be handled differently for recurring
                CreatedAt = EditTask.CreatedAt,
                CompletedAt = EditTask.CompletedAt,
                IsRecurring = EditTask.IsRecurring,
                RecurrenceUnit = EditTask.RecurrenceUnit,
                RecurrenceInterval = EditTask.RecurrenceInterval
            };
            // If editing a recurring task that was somehow marked completed, reset for editing.
            if (task.IsRecurring) task.IsCompleted = false;
        }
        else
        {
            task = new TodoTask { Deadline = DateTime.Today.AddDays(1), RecurrenceInterval = 1, RecurrenceUnit = RecurrenceUnitType.None };
        }
        hasUserEditedDescription = !string.IsNullOrWhiteSpace(task.Description); // Ensure this is set correctly
    }

    private async Task SaveTask()
    {
        if (task.IsRecurring && task.RecurrenceUnit == RecurrenceUnitType.None)
        {
            // Optionally, prevent saving or auto-disable recurrence
            // For now, we'll let it save, but it won't recur.
            // Or, you could add a validation message.
        }
        if (task.IsRecurring)
        {
            task.IsCompleted = false; // Recurring tasks are never "finally" completed, they just reset.
        }

        if (IsEditing)
        {
            await TaskManager.UpdateTaskAsync(task);
        }
        else
        {
            await TaskManager.AddTaskAsync(task);
            task = new TodoTask { Deadline = DateTime.Today.AddDays(1) }; // Reset form
        }

        await OnTaskSaved.InvokeAsync();
    }

    private void AddSubtask()
    {
        if (!string.IsNullOrWhiteSpace(newSubTask))
        {
            task.SubTasks.Add(newSubTask);
            newSubTask = string.Empty;
        }
    }

    private void RemoveSubtask(string subtask)
    {
        task.SubTasks.Remove(subtask);
    }
    private async Task CancelEdit()
    {
        await OnEditCancelled.InvokeAsync();
    }
    private void ApplyTemplate(TaskTemplate template)
    {
        switch (template)
        {
            case TaskTemplate.Meeting:
                task.Title = "Quick sync call";
                task.Description = "Join team call to align on priorities";
                task.EstimatedMinutes = 30;
                task.Priority = "Medium";
                task.SubTasks.AddRange(new[] { "Check agenda", "Join call" });
                break;
            case TaskTemplate.Research:
                task.Title = "Look into options";
                task.Description = "Research and compare available solutions";
                task.EstimatedMinutes = 45;
                task.Priority = "Medium";
                task.SubTasks.AddRange(new[] { "Search online", "Take notes", "Share findings" });
                break;
            case TaskTemplate.Development:
                task.Title = "Fix bug";
                task.Description = "Investigate and resolve reported issue";
                task.EstimatedMinutes = 60;
                task.Priority = "High";
                task.SubTasks.AddRange(new[] { "Reproduce issue", "Find solution", "Test fix" });
                break;
            case TaskTemplate.Review:
                task.Title = "Review document";
                task.Description = "Check document for accuracy and completeness";
                task.EstimatedMinutes = 20;
                task.Priority = "Medium";
                task.SubTasks.AddRange(new[] { "Read through", "Leave feedback" });
                break;
            case TaskTemplate.Planning:
                task.Title = "Plan next week";
                task.Description = "Organize tasks and priorities for upcoming week";
                task.EstimatedMinutes = 30;
                task.Priority = "High";
                task.SubTasks.AddRange(new[] { "Check calendar", "List priorities", "Schedule tasks" });
                break;
            case TaskTemplate.Learning:
                task.Title = "Watch tutorial";
                task.Description = "Learn new skill or tool through online content";
                task.EstimatedMinutes = 45;
                task.Priority = "Low";
                task.SubTasks.AddRange(new[] { "Find tutorial", "Take notes", "Practice" });
                break;
        }
        hasUserEditedDescription = false;
        StateHasChanged();
    }
    private void GenerateDescription()
    {
        if (string.IsNullOrWhiteSpace(task.Title) || hasUserEditedDescription)
            return;

        var title = task.Title.ToLower();

        if (title.Contains("meeting") || title.Contains("call"))
        {
            generatedDescription = "Participate in meeting to discuss objectives and next steps";
        }
        else if (title.Contains("review") || title.Contains("check"))
        {
            generatedDescription = "Review and analyze the specified item for quality and completeness";
        }
        else if (title.Contains("fix") || title.Contains("bug") || title.Contains("issue"))
        {
            generatedDescription = "Identify root cause and implement solution for the reported issue";
        }
        else if (title.Contains("implement") || title.Contains("develop") || title.Contains("build"))
        {
            generatedDescription = "Design and implement the requested functionality according to requirements";
        }
        else if (title.Contains("test") || title.Contains("qa"))
        {
            generatedDescription = "Execute comprehensive testing to ensure functionality meets requirements";
        }
        else if (title.Contains("research") || title.Contains("investigate"))
        {
            generatedDescription = "Conduct thorough research and analysis to gather relevant information";
        }
        else if (title.Contains("plan") || title.Contains("design"))
        {
            generatedDescription = "Create detailed plan and design for successful project execution";
        }
        else if (title.Contains("update") || title.Contains("upgrade"))
        {
            generatedDescription = "Update existing system or component to latest version or requirements";
        }
        else if (title.Contains("document") || title.Contains("write"))
        {
            generatedDescription = "Create comprehensive documentation for the specified topic";
        }
        else
        {
            generatedDescription = $"Complete the task: {task.Title}";
        }

        StateHasChanged();
    }

    private void OnDescriptionInput(ChangeEventArgs e)
    {
        hasUserEditedDescription = !string.IsNullOrWhiteSpace(e.Value?.ToString());
        if (hasUserEditedDescription)
        {
            generatedDescription = string.Empty;
        }
    }

    private void UseSuggestedDescription()
    {
        task.Description = generatedDescription;
        generatedDescription = string.Empty;
        hasUserEditedDescription = true;
        StateHasChanged();
    }

    private void SetEstimatedTime(int minutes)
    {
        task.EstimatedMinutes = minutes;
        StateHasChanged(); // Ensure the InputNumber updates if it's bound
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}
